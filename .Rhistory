else {
return (x$Hospital.Name[num])
}
}, num)
#Return data.frame with format
return ( data.frame(hospital=unlist(ans), state=names(ans)) )
setwd("~/Desktop/Online Coursera/Coursera-R-Programming/week4/")
list.files()
helper <- function(data, col_num, state) {
state_subset <- data[data[, 7]==state, ]
outcome_arr <- state_subset[, col_num]
min <- min(outcome_arr, na.rm=T)
min_index <- which(outcome_arr == min)
hosp_name <- state_subset[min_index, 2]
return(hosp_name)
}
best <- function(state, outcome) {
directory <- "C:/Users/Luis Muñoz/Desktop/coursera/outcome-of-care-measures.csv"
data <- read.csv(directory, colClasses="character")
data[, 11] <- as.numeric(data[, 11])
data[, 17] <- as.numeric(data[, 17])
data[, 23] <- as.numeric(data[, 23])
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% data$State) {
stop("invalid state")
} else if(!outcome %in% valid_outcomes) {
stop("invalid outcome")
} else {
if(outcome == "heart attack") {
hosp_name <- helper(data, 11, state)
} else if(outcome == "heart failure") {
hosp_name <- helper(data, 17, state)
} else {
hosp_name <- helper(data, 23, state)
}
result <- hosp_name
return(result)
}
}
rankhospital <- function(state, outcome, num = "best") {
full_data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
column <- if (outcome == "heart attack") {
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
} else {
stop("invalid outcome")
}
data_for_state <- full_data[full_data$State == state, c("Hospital.Name", column)]
if (nrow(data_for_state) == 0) {
stop("invalid state")
}
data_for_state[,2] <- as.numeric(data_for_state[,2])
ordered_data_for_state <- order(data_for_state[column], data_for_state$Hospital.Name, na.last=NA)
if (num == "best") {
as.character(data_for_state$Hospital.Name[ordered_data_for_state[1]])
} else if (num == "worst") {
as.character(data_for_state$Hospital.Name[ordered_data_for_state[length(ordered_data_for_state)]])
} else if (is.numeric(num)) {
as.character(data_for_state$Hospital.Name[ordered_data_for_state[num]])
} else {
stop("invalid num")
}
}
rankall <- function(outcome, num = "best") {
## Read outcome data: COLS: HospitalName, State, HeartAttack, HearFailure, Pneumonia
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")[,c(2,7,11,17,23)]
## Check that state and outcome are valid
if(! (outcome == "heart attack" || outcome == "heart failure" || outcome == "pneumonia") ) {
stop("invalid outcome")
}
if(class(num) == "character"){
if (! (num == "best" || num == "worst")){
stop("invalid number")
}
}
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the (abbreviated) state name
# Remove columns by outcome, only left HospitalName and Deaths by outcome
if(outcome == "heart attack") {
data = data[,c(1,2,3)]
} else if(outcome == "heart failure") {
data = data[,c(1,2,4)]
} else if(outcome == "pneumonia") {
data = data[,c(1,2,5)]
}
names(data)[3] = "Deaths"
data[, 3] = suppressWarnings( as.numeric(data[, 3]) )
# Remove rows with NA
data = data[!is.na(data$Deaths),]
splited = split(data, data$State)
ans = lapply(splited, function(x, num) {
# Order by Deaths and then HospitalName
x = x[order(x$Deaths, x$Hospital.Name),]
# Return
if(class(num) == "character") {
if(num == "best") {
return (x$Hospital.Name[1])
}
else if(num == "worst") {
return (x$Hospital.Name[nrow(x)])
}
}
else {
return (x$Hospital.Name[num])
}
}, num)
#Return data.frame with format
return ( data.frame(hospital=unlist(ans), state=names(ans)) )
}
setwd("~/Desktop/Online Coursera/Coursera-R-Programming/week4/")
list.files()
helper <- function(data, col_num, state) {
state_subset <- data[data[, 7]==state, ]
outcome_arr <- state_subset[, col_num]
min <- min(outcome_arr, na.rm=T)
min_index <- which(outcome_arr == min)
hosp_name <- state_subset[min_index, 2]
return(hosp_name)
}
best <- function(state, outcome) {
directory <- "C:/Users/Luis Muñoz/Desktop/coursera/outcome-of-care-measures.csv"
data <- read.csv(directory, colClasses="character")
data[, 11] <- as.numeric(data[, 11])
data[, 17] <- as.numeric(data[, 17])
data[, 23] <- as.numeric(data[, 23])
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% data$State) {
stop("invalid state")
} else if(!outcome %in% valid_outcomes) {
stop("invalid outcome")
} else {
if(outcome == "heart attack") {
hosp_name <- helper(data, 11, state)
} else if(outcome == "heart failure") {
hosp_name <- helper(data, 17, state)
} else {
hosp_name <- helper(data, 23, state)
}
result <- hosp_name
return(result)
}
}
rankhospital <- function(state, outcome, num = "best") {
full_data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
column <- if (outcome == "heart attack") {
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
} else {
stop("invalid outcome")
}
data_for_state <- full_data[full_data$State == state, c("Hospital.Name", column)]
if (nrow(data_for_state) == 0) {
stop("invalid state")
}
data_for_state[,2] <- as.numeric(data_for_state[,2])
ordered_data_for_state <- order(data_for_state[column], data_for_state$Hospital.Name, na.last=NA)
if (num == "best") {
as.character(data_for_state$Hospital.Name[ordered_data_for_state[1]])
} else if (num == "worst") {
as.character(data_for_state$Hospital.Name[ordered_data_for_state[length(ordered_data_for_state)]])
} else if (is.numeric(num)) {
as.character(data_for_state$Hospital.Name[ordered_data_for_state[num]])
} else {
stop("invalid num")
}
}
rankall <- function(outcome, num = "best") {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")[,c(2,7,11,17,23)]
if(! (outcome == "heart attack" || outcome == "heart failure" || outcome == "pneumonia") ) {
stop("invalid outcome")
}
if(class(num) == "character"){
if (! (num == "best" || num == "worst")){
stop("invalid number")
}
}
if(outcome == "heart attack") {
data = data[,c(1,2,3)]
} else if(outcome == "heart failure") {
data = data[,c(1,2,4)]
} else if(outcome == "pneumonia") {
data = data[,c(1,2,5)]
}
names(data)[3] = "Deaths"
data[, 3] = suppressWarnings( as.numeric(data[, 3]) )
data = data[!is.na(data$Deaths),]
splited = split(data, data$State)
ans = lapply(splited, function(x, num) {
x = x[order(x$Deaths, x$Hospital.Name),]
if(class(num) == "character") {
if(num == "best") {
return (x$Hospital.Name[1])
}
else if(num == "worst") {
return (x$Hospital.Name[nrow(x)])
}
}
else {
return (x$Hospital.Name[num])
}
}, num)
return ( data.frame(hospital=unlist(ans), state=names(ans)) )
}
setwd("~/Desktop/Online Coursera/Coursera-R-Programming/week4/")
list.files()
helper <- function(data, col_num, state) {
state_subset <- data[data[, 7]==state, ]
outcome_arr <- state_subset[, col_num]
min <- min(outcome_arr, na.rm=T)
min_index <- which(outcome_arr == min)
hosp_name <- state_subset[min_index, 2]
return(hosp_name)
}
best <- function(state, outcome) {
directory <- "C:/Users/Luis Muñoz/Desktop/coursera/outcome-of-care-measures.csv"
data <- read.csv(directory, colClasses="character")
data[, 11] <- as.numeric(data[, 11])
data[, 17] <- as.numeric(data[, 17])
data[, 23] <- as.numeric(data[, 23])
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% data$State) {
stop("invalid state")
} else if(!outcome %in% valid_outcomes) {
stop("invalid outcome")
} else {
if(outcome == "heart attack") {
hosp_name <- helper(data, 11, state)
} else if(outcome == "heart failure") {
hosp_name <- helper(data, 17, state)
} else {
hosp_name <- helper(data, 23, state)
}
result <- hosp_name
return(result)
}
}
rankhospital <- function(state, outcome, num = "best") {
full_data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
column <- if (outcome == "heart attack") {
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
} else {
stop("invalid outcome")
}
data_for_state <- full_data[full_data$State == state, c("Hospital.Name", column)]
if (nrow(data_for_state) == 0) {
stop("invalid state")
}
data_for_state[,2] <- as.numeric(data_for_state[,2])
ordered_data_for_state <- order(data_for_state[column], data_for_state$Hospital.Name, na.last=NA)
if (num == "best") {
as.character(data_for_state$Hospital.Name[ordered_data_for_state[1]])
} else if (num == "worst") {
as.character(data_for_state$Hospital.Name[ordered_data_for_state[length(ordered_data_for_state)]])
} else if (is.numeric(num)) {
as.character(data_for_state$Hospital.Name[ordered_data_for_state[num]])
} else {
stop("invalid num")
}
}
rankall <- function(outcome, num="best") {
outcome.names <- c("heart attack", "heart failure", "pneumonia")
# check validity of outcome
if (!outcome %in% outcome.names) {
stop("invalid outcome")
}
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
# rename outcome columns for easy reference
names(data)[c(11,17,23)] <- outcome.names
# take just the columns we need, convert outcome column to numeric
data <- data[,c("State","Hospital.Name",outcome)]
data[,outcome] <- suppressWarnings(as.numeric(data[,outcome]))
# get rid of rows where outcome is na
data <- data[!is.na(data[outcome]),]
# sort data by state name, then outcome, then hospital name
data <- data[order(data$State, data[outcome], data$Hospital.Name),]
# aggregate by state, choosing the row that corresponds to the rank num
ranksbystate <- aggregate(data, by=list(data$State), function(x) {
if (!is.numeric(num)) {
if (num == "best") {
num <- 1
} else if (num == "worst") {
num <- length(x)
} else {
stop("invalid num")
}
}
x[num]
})
# get just the columns we need and rename them
out <- ranksbystate[,c(3,1)]
names(out) <- c("hospital","state")
return(out)
}
rankall <- function(outcome, num="best") {
outcome.names <- c("heart attack", "heart failure", "pneumonia")
# check validity of outcome
if (!outcome %in% outcome.names) {
stop("invalid outcome")
}
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
# rename outcome columns for easy reference
names(data)[c(11,17,23)] <- outcome.names
# take just the columns we need, convert outcome column to numeric
data <- data[,c("State","Hospital.Name",outcome)]
data[,outcome] <- suppressWarnings(as.numeric(data[,outcome]))
# get rid of rows where outcome is na
data <- data[!is.na(data[outcome]),]
# sort data by state name, then outcome, then hospital name
data <- data[order(data$State, data[outcome], data$Hospital.Name),]
# aggregate by state, choosing the row that corresponds to the rank num
ranksbystate <- aggregate(data, by=list(data$State), function(x) {
if (!is.numeric(num)) {
if (num == "best") {
num <- 1
} else if (num == "worst") {
num <- length(x)
} else {
stop("invalid num")
}
}
x[num]
})
# get just the columns we need and rename them
out <- ranksbystate[,c(3,1)]
names(out) <- c("hospital","state")
return(out)
}
rankall <- function(outcome, num = "best" ){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
state <- data$State
state <- sort(unique(state))
hospital <- rep("", length(state))
for (i in 1:length(state)) {
statedata<- data[data$State==state[i],]
if (outcome == 'heart attack') {
death <- as.numeric(statedata[,11])
} else if (outcome == 'heart failure') {
death <- as.numeric(statedata[,17])
} else if (outcome == 'pneumonia') {
death <- as.numeric(statedata[,23])
} else {
stop("invalid outcome")
}
a <- rank(death, na.last=NA)
if (num=="best") {
r <- 1
} else if (num =="worst") {
r <- length(a)
} else if (num <= length(a) ) {
r <- num
} else {
r <- NA
}
if (is.na(r)) {
hospital[i] <- NA
} else {
hospital[i] <- statedata$Hospital.Name[order(death, statedata$Hospital.Name)[r]]
}
}
return(data.frame(hospital=hospital, state=state))
}
rankall <- function(outcome, num = "best" ){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
state <- data$State
state <- sort(unique(state))
hospital <- rep("", length(state))
for (i in 1:length(state)) {
statedata<- data[data$State==state[i],]
if (outcome == 'heart attack') {
death <- as.numeric(statedata[,11])
} else if (outcome == 'heart failure') {
death <- as.numeric(statedata[,17])
} else if (outcome == 'pneumonia') {
death <- as.numeric(statedata[,23])
} else {
stop("invalid outcome")
}
a <- rank(death, na.last=NA)
if (num=="best") {
r <- 1
} else if (num =="worst") {
r <- length(a)
} else if (num <= length(a) ) {
r <- num
} else {
r <- NA
}
if (is.na(r)) {
hospital[i] <- NA
} else {
hospital[i] <- statedata$Hospital.Name[order(death, statedata$Hospital.Name)[r]]
}
}
return(data.frame(hospital=hospital, state=state))
}
}
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
}
setwd("~/Desktop/Online Coursera/Coursera-R-Programming/week4/")
list.files()
helper <- function(data, col_num, state) {
state_subset <- data[data[, 7]==state, ]
outcome_arr <- state_subset[, col_num]
min <- min(outcome_arr, na.rm=T)
min_index <- which(outcome_arr == min)
hosp_name <- state_subset[min_index, 2]
return(hosp_name)
}
best <- function(state, outcome) {
directory <- "C:/Users/Luis Muñoz/Desktop/coursera/outcome-of-care-measures.csv"
data <- read.csv(directory, colClasses="character")
data[, 11] <- as.numeric(data[, 11])
data[, 17] <- as.numeric(data[, 17])
data[, 23] <- as.numeric(data[, 23])
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% data$State) {
stop("invalid state")
} else if(!outcome %in% valid_outcomes) {
stop("invalid outcome")
} else {
if(outcome == "heart attack") {
hosp_name <- helper(data, 11, state)
} else if(outcome == "heart failure") {
hosp_name <- helper(data, 17, state)
} else {
hosp_name <- helper(data, 23, state)
}
result <- hosp_name
return(result)
}
}
rankhospital <- function(state, outcome, num = "best") {
full_data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
column <- if (outcome == "heart attack") {
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
} else {
stop("invalid outcome")
}
data_for_state <- full_data[full_data$State == state, c("Hospital.Name", column)]
if (nrow(data_for_state) == 0) {
stop("invalid state")
}
data_for_state[,2] <- as.numeric(data_for_state[,2])
ordered_data_for_state <- order(data_for_state[column], data_for_state$Hospital.Name, na.last=NA)
if (num == "best") {
as.character(data_for_state$Hospital.Name[ordered_data_for_state[1]])
} else if (num == "worst") {
as.character(data_for_state$Hospital.Name[ordered_data_for_state[length(ordered_data_for_state)]])
} else if (is.numeric(num)) {
as.character(data_for_state$Hospital.Name[ordered_data_for_state[num]])
} else {
stop("invalid num")
}
}
rankall <- function(outcome, num = "best" ){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
state <- data$State
state <- sort(unique(state))
hospital <- rep("", length(state))
for (i in 1:length(state)) {
statedata<- data[data$State==state[i],]
if (outcome == 'heart attack') {
death <- as.numeric(statedata[,11])
} else if (outcome == 'heart failure') {
death <- as.numeric(statedata[,17])
} else if (outcome == 'pneumonia') {
death <- as.numeric(statedata[,23])
} else {
stop("invalid outcome")
}
a <- rank(death, na.last=NA)
if (num=="best") {
r <- 1
} else if (num =="worst") {
r <- length(a)
} else if (num <= length(a) ) {
r <- num
} else {
r <- NA
}
if (is.na(r)) {
hospital[i] <- NA
} else {
hospital[i] <- statedata$Hospital.Name[order(death, statedata$Hospital.Name)[r]]
}
}
return(data.frame(hospital=hospital, state=state))
}
}
View(rankhospital)
View(rankhospital)
View(rankall)
View(best)
